age = c(28, 27, 30, 28, 29, 29, 27, 27, 31, 30),
grade = c("C", "A", "A", "C", "B", "B", "B", "A", "C", "C"),
test1_score = c(8.9, 9.5, 9.6, 8.9, 9.1, 9.3, 9.3, 9.9, 8.5, 8.6),
test2_score = c(9.1, 9.1, 9.2, 9.1, 8.9, 8.5, 9.2, 9.3, 9.1, 8.8),
final_score = c(9, 9.3, 9.4, 9, 9, 8.9, 9.25, 9.6, 8.8, 8.7),
registered = c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE),
stringsAsFactors = FALSE
)
df
formattable(df, list(area(col = c(test1_score, test2_score)) ~ normalize_bar("pink", 0.2)
))
library(tidyverse)
ggplot(taxa_counts_df, aes(Species, Counts)) +
geom_bar(stat = "identity", fill = "#631879FF", color = "black" ) +
theme_minimal() +
xlab("Species") +
ylab("Read Counts") +
theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold", colour = "black"),
axis.line = element_line(colour = "black", linewidth = 0.5, linetype = "solid" ),
strip.text.x = element_text(size = 14, face = "bold", colour = "black"),
axis.text.y= element_text(size=10, face = "bold", colour = "black"),
axis.text.x= element_text(size=10, face = "bold", colour = "black", angle = -45, vjust = 0.5, hjust=1),
legend.position = "none",
title = element_text(size = 10, face = "bold")
) +
ggtitle("Species with atleast 0.5% Relative Abundance")
taxa_counts_df <- read.table("barcode01_final_kraken2_result.txt", header = FALSE, sep = "\t")
taxa_counts_df[taxa_counts_df==""] <- "Unclassified"
colnames(taxa_counts_df) <- c("Tax_ID", "Counts", "Superkingdom", "Phylum",
"Class", "Order", "Family", "Genus", "Species")
taxa <- "Species"
taxa_counts_df %>% dplyr::select(c(!!sym(taxa), Counts)) %>%
dplyr::filter(!!sym(taxa) !="Unclassified") %>% dplyr::summarise(Counts = sum(Counts))
taxa_counts_df <- taxa_counts_df %>% group_by(Species) %>% summarise(Counts = sum(Counts))
taxa_counts_df <- taxa_counts_df %>% mutate(Abundance = (Counts/sum(Counts))*100) %>% filter(Abundance >=0.5)
taxa_counts_df
ggplot(taxa_counts_df, aes(Species, Counts)) +
geom_bar(stat = "identity", fill = "#631879FF", color = "black" ) +
theme_minimal() +
xlab("Species") +
ylab("Read Counts") +
theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold", colour = "black"),
axis.line = element_line(colour = "black", linewidth = 0.5, linetype = "solid" ),
strip.text.x = element_text(size = 14, face = "bold", colour = "black"),
axis.text.y= element_text(size=10, face = "bold", colour = "black"),
axis.text.x= element_text(size=10, face = "bold", colour = "black", angle = -45, vjust = 0.5, hjust=1),
legend.position = "none",
title = element_text(size = 10, face = "bold")
) +
ggtitle("Species with atleast 0.5% Relative Abundance")
ggplot(taxa_counts_df, aes(Species, Counts)) +
geom_bar(stat = "identity", fill = "#631879FF", color = "black" ) +
theme_minimal() +
xlab("Species") +
ylab("Read Counts") +
theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold", colour = "black"),
axis.line = element_line(colour = "black", linewidth = 0.5, linetype = "solid" ),
strip.text.x = element_text(size = 14, face = "bold", colour = "black"),
axis.text.y= element_text(size=10, face = "bold", colour = "black"),
axis.text.x= element_text(size=10, face = "bold", colour = "black", angle = -45),
legend.position = "none",
title = element_text(size = 10, face = "bold")
) +
ggtitle("Species with atleast 0.5% Relative Abundance")
ggplot(taxa_counts_df, aes(Species, Counts)) +
geom_bar(stat = "identity", fill = "#631879FF", color = "black" ) +
theme_minimal() +
xlab("Species") +
ylab("Read Counts") +
theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold", colour = "black"),
axis.line = element_line(colour = "black", linewidth = 0.5, linetype = "solid" ),
strip.text.x = element_text(size = 14, face = "bold", colour = "black"),
axis.text.y= element_text(size=10, face = "bold", colour = "black"),
axis.text.x= element_text(size=10, face = "bold", colour = "black", angle = -45, hjust = 2),
legend.position = "none",
title = element_text(size = 10, face = "bold")
) +
ggtitle("Species with atleast 0.5% Relative Abundance")
ggplot(taxa_counts_df, aes(Species, Counts)) +
geom_bar(stat = "identity", fill = "#631879FF", color = "black" ) +
theme_minimal() +
xlab("Species") +
ylab("Read Counts") +
theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold", colour = "black"),
axis.line = element_line(colour = "black", linewidth = 0.5, linetype = "solid" ),
strip.text.x = element_text(size = 14, face = "bold", colour = "black"),
axis.text.y= element_text(size=10, face = "bold", colour = "black"),
axis.text.x= element_text(size=10, face = "bold", colour = "black", angle = -45, vjust = 1),
legend.position = "none",
title = element_text(size = 10, face = "bold")
) +
ggtitle("Species with atleast 0.5% Relative Abundance")
ggplot(taxa_counts_df, aes(Species, Counts)) +
geom_bar(stat = "identity", fill = "#631879FF", color = "black" ) +
theme_minimal() +
xlab("Species") +
ylab("Read Counts") +
theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold", colour = "black"),
axis.line = element_line(colour = "black", linewidth = 0.5, linetype = "solid" ),
strip.text.x = element_text(size = 14, face = "bold", colour = "black"),
axis.text.y= element_text(size=10, face = "bold", colour = "black"),
axis.text.x= element_text(size=10, face = "bold", colour = "black", angle = -45, vjust = 2),
legend.position = "none",
title = element_text(size = 10, face = "bold")
) +
ggtitle("Species with atleast 0.5% Relative Abundance")
ggplot(taxa_counts_df, aes(Species, Counts)) +
geom_bar(stat = "identity", fill = "#631879FF", color = "black" ) +
theme_minimal() +
xlab("Species") +
ylab("Read Counts") +
theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold", colour = "black"),
axis.line = element_line(colour = "black", linewidth = 0.5, linetype = "solid" ),
strip.text.x = element_text(size = 14, face = "bold", colour = "black"),
axis.text.y= element_text(size=10, face = "bold", colour = "black"),
axis.text.x= element_text(size=10, face = "bold", colour = "black", angle = -45, vjust = -2),
legend.position = "none",
title = element_text(size = 10, face = "bold")
) +
ggtitle("Species with atleast 0.5% Relative Abundance")
ggplot(taxa_counts_df, aes(Species, Counts)) +
geom_bar(stat = "identity", fill = "#631879FF", color = "black" ) +
theme_minimal() +
xlab("Species") +
ylab("Read Counts") +
theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold", colour = "black"),
axis.line = element_line(colour = "black", linewidth = 0.5, linetype = "solid" ),
strip.text.x = element_text(size = 14, face = "bold", colour = "black"),
axis.text.y= element_text(size=10, face = "bold", colour = "black"),
axis.text.x= element_text(size=10, face = "bold", colour = "black", angle = -45, vjust = 1, hjust = 1),
legend.position = "none",
title = element_text(size = 10, face = "bold")
) +
ggtitle("Species with atleast 0.5% Relative Abundance")
ggplot(taxa_counts_df, aes(Species, Counts)) +
geom_bar(stat = "identity", fill = "#631879FF", color = "black" ) +
theme_minimal() +
xlab("Species") +
ylab("Read Counts") +
theme(
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold", colour = "black"),
axis.line = element_line(colour = "black", linewidth = 0.5, linetype = "solid" ),
strip.text.x = element_text(size = 14, face = "bold", colour = "black"),
axis.text.y= element_text(size=10, face = "bold", colour = "black"),
axis.text.x= element_text(size=10, face = "bold", colour = "black", angle = 45, vjust = 1, hjust = 1),
legend.position = "none",
title = element_text(size = 10, face = "bold")
) +
ggtitle("Species with atleast 0.5% Relative Abundance")
classification_data_list[[1]]
classification_data_list[[1]] %>% View()
library(tidyverse)
classification_data_list[[1]] %>% View()
name_data <- data.frame(
"first_name" = c("John", "John", "John", "John", "John", "John", "James", "James", "Adam", "Adam", "Henry"),
"middle_name" = c("Claude", "Claude", "Claude", "Smith", "Smith", "Peters", "Stevens", "Stevens", "Ford", "Tom", "Frank"),
"last_name" = c("Tony", "Tony", "Frank", "Carson", "Phil", "Lewis", "Eric", "David", "Roberts", "Scott", "Xavier")
)
name_data
name_data %>%
mutate(n = n(),
first_middle = str_c(first_name, middle_name, sep = " "),
first_middle_last = str_c(first_name, middle_name, last_name, sep = " ")) %>%
group_by(first_name) %>%
mutate(n_first = n()) %>%
group_by(first_middle) %>%
mutate(n_first_middle = n())%>%
group_by(first_middle_last) %>%
mutate(n_first_middle_last = n()) %>%
ungroup()
name_data <- name_data %>%
mutate(n = n(),
first_middle = str_c(first_name, middle_name, sep = " "),
first_middle_last = str_c(first_name, middle_name, last_name, sep = " ")) %>%
group_by(first_name) %>%
mutate(n_first = n()) %>%
group_by(first_middle) %>%
mutate(n_first_middle = n())%>%
group_by(first_middle_last) %>%
mutate(n_first_middle_last = n()) %>%
ungroup()
name_data %>%
group_by(first_name) %>%
summarize(value = mean(n_first)) %>%
arrange(desc(value)) %>%
mutate(source = 0,
target = 1:length(value))
first_node <- name_data %>%
group_by(first_name) %>%
summarize(value = mean(n_first)) %>%
arrange(desc(value)) %>%
mutate(source = 0,
target = 1:length(value))
name_data %>%
group_by(first_middle) %>%
summarize(n_first_middle = mean(n_first_middle)) %>%
arrange(desc(n_first_middle)) %>%
mutate(target = 1:length(n_first_middle) + length(first_node$value),
space = str_locate(first_middle, pattern = "\ ")[,"start"],
first_name = str_sub(first_middle, start = 1, end = space - 1)) %>%
arrange(first_name)
second_node <- name_data %>%
group_by(first_middle) %>%
summarize(n_first_middle = mean(n_first_middle)) %>%
arrange(desc(n_first_middle)) %>%
mutate(target = 1:length(n_first_middle) + length(first_node$value),
space = str_locate(first_middle, pattern = "\ ")[,"start"],
first_name = str_sub(first_middle, start = 1, end = space - 1)) %>%
arrange(first_name)
inner_join(second_node, first_node, by = "first_name") %>%
mutate(value = n_first_middle,
source = target.y,
target = target.x) %>%
select(-n_first_middle, -target.x, -target.y, -first_name, -space)
second_node <- inner_join(second_node, first_node, by = "first_name") %>%
mutate(value = n_first_middle,
source = target.y,
target = target.x) %>%
select(-n_first_middle, -target.x, -target.y, -first_name, -space)
name_data %>%
group_by(first_middle_last) %>%
summarize(n_first_middle_last = mean(n_first_middle_last)) %>%
arrange(desc(n_first_middle_last)) %>%
mutate(target = 1:length(n_first_middle_last) + max(second_node$target),
space1 = str_locate(first_middle_last, pattern = "\ ")[,"start"],
first_name = str_sub(first_middle_last, start = 1, end = space1 - 1),
middle_last = str_sub(first_middle_last, start = space1 + 1),
space2 = str_locate(middle_last, pattern = "\ ")[,"start"],
first_middle = str_sub(first_middle_last, start = 1, end = space1 + space2 - 1) ) %>%
arrange(first_name)
third_node <- name_data %>%
group_by(first_middle_last) %>%
summarize(n_first_middle_last = mean(n_first_middle_last)) %>%
arrange(desc(n_first_middle_last)) %>%
mutate(target = 1:length(n_first_middle_last) + max(second_node$target),
space1 = str_locate(first_middle_last, pattern = "\ ")[,"start"],
first_name = str_sub(first_middle_last, start = 1, end = space1 - 1),
middle_last = str_sub(first_middle_last, start = space1 + 1),
space2 = str_locate(middle_last, pattern = "\ ")[,"start"],
first_middle = str_sub(first_middle_last, start = 1, end = space1 + space2 - 1) ) %>%
arrange(first_name)
third_node <- inner_join(third_node, second_node, by = "first_middle") %>%
mutate(name = first_middle_last,
value = n_first_middle_last,
source = target.y,
target = target.x) %>%
select(-first_middle_last, -n_first_middle_last, -target.x, -target.y,
-first_name, -middle_last, -first_middle, -space1, -space2) %>%
select(name, source, target, value)
third_node
second_node <- second_node %>%
mutate(name = first_middle) %>%
select(name, source, target, value)
first_node <- first_node %>%
mutate(name = first_name) %>%
select(name, source, target, value)
all_nodes <- rbind(first_node, second_node, third_node) %>%
group_by(source) %>%
arrange(target)
name_nodes <- data.frame("name" = all_nodes$name)
name_nodes <- data.frame(c("Names", name_nodes$name))
names(name_nodes) <- "name"
all_nodes <- all_nodes %>% select(-name)
all_nodes <- as.data.frame(all_nodes)
sankeyNetwork(Links = all_nodes, Nodes = name_nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
fontSize= 8, nodeWidth = 30)
library(networkD3)
sankeyNetwork(Links = all_nodes, Nodes = name_nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
fontSize= 8, nodeWidth = 30)
head(classification_data_list[[1]])
df <- classification_data_list[[1]]
df
df %>%
mutate(across(everything(), ~ifelse(. == "Unclassified", paste(lag(Phylum), "unclassified"), .))) %>%
pivot_longer(cols = c(Superkingdom, Phylum, Class, Order, Family, Genus, Species),
names_to = "Taxonomy",
values_to = "Taxon") %>%
mutate(Taxonomy = factor(Taxonomy,
levels = c("Superkingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species"),
labels = c("D", "P", "C", "O", "F", "G", "S"))) %>%
group_by(Superkingdom, Phylum, Taxonomy, Taxon) %>%
summarise(Counts = sum(Counts), .groups = "drop")
df
df %>%
mutate(across(everything(), ~ifelse(. == "Unclassified", paste(lag(Phylum), "unclassified"), .)))
df %>%
mutate(across(everything(), ~ifelse(. == "Unclassified", paste(lag(Phylum), "Unclassified"), .))) %>%
pivot_longer(cols = c(Superkingdom, Phylum, Class, Order, Family, Genus, Species),
names_to = "Taxonomy",
values_to = "Taxon")
df %>%
mutate(across(everything(), ~ifelse(. == "Unclassified", paste(lag(Phylum), "Unclassified"), .))) %>%
pivot_longer(cols = c(Superkingdom, Phylum, Class, Order, Family, Genus, Species),
names_to = "Taxonomy",
values_to = "Taxon") %>%
mutate(Taxonomy = factor(Taxonomy,
levels = c("Superkingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species"),
labels = c("D", "P", "C", "O", "F", "G", "S")))
df %>%
mutate(across(everything(), ~ifelse(. == "Unclassified", paste(lag(Phylum), "Unclassified"), .))) %>%
pivot_longer(cols = c(Superkingdom, Phylum, Class, Order, Family, Genus, Species),
names_to = "Taxonomy",
values_to = "Taxon") %>%
mutate(Taxonomy = factor(Taxonomy,
levels = c("Superkingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species"),
labels = c("D", "P", "C", "O", "F", "G", "S"))) %>%
group_by(Taxonomy, Taxon) %>%
summarise(Counts = sum(Counts), .groups = "drop")
df_alluvial <- df %>%
mutate(across(everything(), ~ifelse(. == "Unclassified", paste(lag(Phylum), "Unclassified"), .))) %>%
pivot_longer(cols = c(Superkingdom, Phylum, Class, Order, Family, Genus, Species),
names_to = "Taxonomy",
values_to = "Taxon") %>%
mutate(Taxonomy = factor(Taxonomy,
levels = c("Superkingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species"),
labels = c("D", "P", "C", "O", "F", "G", "S"))) %>%
group_by(Taxonomy, Taxon) %>%
summarise(Counts = sum(Counts), .groups = "drop")
ggplot(df_alluvial,
aes(x = Taxonomy, stratum = Taxon, alluvium = Taxon,
y = Counts, fill = Taxon, label = Taxon)) +
geom_flow(stat = "alluvium", lode.guidance = "frontback", color = "white") +
geom_stratum(alpha = .5) +
geom_text(stat = "stratum", size = 2, color = "black") +
scale_x_discrete(expand = c(.1, .1)) +
scale_fill_brewer(palette = "Set3") +
theme_minimal() +
theme(legend.position = "none",
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid = element_blank()) +
labs(title = "Taxonomic Classification Sankey Diagram")
library(ggalluvial)
ggplot(df_alluvial,
aes(x = Taxonomy, stratum = Taxon, alluvium = Taxon,
y = Counts, fill = Taxon, label = Taxon)) +
geom_flow(stat = "alluvium", lode.guidance = "frontback", color = "white") +
geom_stratum(alpha = .5) +
geom_text(stat = "stratum", size = 2, color = "black") +
scale_x_discrete(expand = c(.1, .1)) +
scale_fill_brewer(palette = "Set3") +
theme_minimal() +
theme(legend.position = "none",
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid = element_blank()) +
labs(title = "Taxonomic Classification Sankey Diagram")
df_alluvial
df <- classification_data_list[[1]]
df
df %>% group_by(Species) %>% mutate(Abundance = (Counts/sum(Counts))*100) %>% filter(Abundance > 1)
df
df %>% group_by(Species) %>% mutate(Abundance = (Counts/sum(Counts))*100) %>% filter(Abundance > 1)
df %>% group_by(Species) %>% mutate(Abundance = (Counts/sum(Counts))*100) %>% filter(Abundance > 1) %>% View()
df %>% group_by(Species) %>% summarise(Counts = (Counts/sum(Counts))*100)
df %>% group_by(Species) %>% summarise(Counts = sum(Counts))
df %>% group_by(Species) %>% summarise(Counts = sum(Counts)) %>% mutate(Abundance = (Counts/sum(Counts))*100)
df %>% group_by(Species) %>% summarise(Counts = sum(Counts)) %>% mutate(Abundance = (Counts/sum(Counts))*100) %>% filter(Abundance>1)
df %>% group_by(Species) %>% summarise(Counts = sum(Counts)) %>% mutate(Abundance = (Counts/sum(Counts))*100) %>% filter(Abundance>0.1)
filtered_df <- df %>% group_by(Species) %>% summarise(Counts = sum(Counts)) %>% mutate(Abundance = (Counts/sum(Counts))*100) %>% filter(Abundance>0.1)
which(filtered_df$Species %in% df$Species)
df[which(filtered_df$Species %in% df$Species),]
library(shiny); runApp('C:/Users/Nirmal/OneDrive/Desktop/NanoTaxi/test.R')
runApp('C:/Users/Nirmal/OneDrive/Desktop/NanoTaxi/test.R')
# Load required packages
library(networkD3)
library(dplyr)
# Your example data frame
df <- data.frame(
TAX_ID = c(102684, 1051981, 1071886, 1080071, 1080072, 1111760),
Counts = c(1, 39, 724, 11, 2, 3),
Superkingdom = rep("Bacteria", 6),
Phylum = rep("Bacillota", 6),
Class = rep("Bacilli", 6),
Order = rep("Lactobacillales", 6),
Family = rep("Streptococcaceae", 6),
Genus = rep("Streptococcus", 6),
Species = c("Streptococcus infantarius", "Streptococcus equi",
"Streptococcus troglodytidis", "Streptococcus orisasini",
"Streptococcus dentasini", "Streptococcus troglodytae"),
Sample_Id = rep("barcode01", 6)
)
df
data.frame(
name = unique(c(df$Superkingdom, df$Phylum, df$Class, df$Order,
df$Family, df$Genus, df$Species))
)
# Combine data to create nodes
nodes <- data.frame(
name = unique(c(df$Superkingdom, df$Phylum, df$Class, df$Order,
df$Family, df$Genus, df$Species))
)
df %>%
select(Superkingdom, Phylum, Class, Order, Family, Genus, Species, Counts) %>%
pivot_longer(cols = -Counts, names_to = "level", values_to = "node") %>%
group_by(level, node) %>%
summarise(value = sum(Counts), .groups = 'drop')
library(tidyverse)
df %>%
select(Superkingdom, Phylum, Class, Order, Family, Genus, Species, Counts) %>%
pivot_longer(cols = -Counts, names_to = "level", values_to = "node") %>%
group_by(level, node) %>%
summarise(value = sum(Counts), .groups = 'drop')
# Create links for Sankey plot
links <- df %>%
select(Superkingdom, Phylum, Class, Order, Family, Genus, Species, Counts) %>%
pivot_longer(cols = -Counts, names_to = "level", values_to = "node") %>%
group_by(level, node) %>%
summarise(value = sum(Counts), .groups = 'drop')
links %>%
mutate(source = match(paste0(level, node), paste0(rep(c("Superkingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species"), each = nrow(nodes)), nodes$name)) - 1,
target = source + 1) %>%
select(source, target, value)
# Create Sankey plot links
links <- links %>%
mutate(source = match(paste0(level, node), paste0(rep(c("Superkingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species"), each = nrow(nodes)), nodes$name)) - 1,
target = source + 1) %>%
select(source, target, value)
sankeyNetwork(Links = links, Nodes = nodes, Source = "source", Target = "target",
Value = "value", NodeID = "name", fontSize = 12, nodeWidth = 30)
# Create Sankey plot
sankey <- sankeyNetwork(Links = links, Nodes = nodes, Source = "source", Target = "target",
Value = "value", NodeID = "name", fontSize = 12, nodeWidth = 30)
# Plot the Sankey diagram
sankey
# Load required packages
library(networkD3)
library(dplyr)
library(tidyr)
# Your example data frame
df <- data.frame(
TAX_ID = c(102684, 1051981, 1071886, 1080071, 1080072, 1111760),
Counts = c(1, 39, 724, 11, 2, 3),
Superkingdom = rep("Bacteria", 6),
Phylum = rep("Bacillota", 6),
Class = rep("Bacilli", 6),
Order = rep("Lactobacillales", 6),
Family = rep("Streptococcaceae", 6),
Genus = rep("Streptococcus", 6),
Species = c("Streptococcus infantarius", "Streptococcus equi",
"Streptococcus troglodytidis", "Streptococcus orisasini",
"Streptococcus dentasini", "Streptococcus troglodytae"),
Sample_Id = rep("barcode01", 6)
)
# Create a list of all nodes
nodes <- data.frame(name = unique(c(df$Superkingdom, df$Phylum, df$Class, df$Order,
df$Family, df$Genus, df$Species)))
# Create the links data frame
links <- df %>%
# Create links from Superkingdom to Species level
gather(key = "level", value = "node", Superkingdom, Phylum, Class, Order, Family, Genus, Species) %>%
group_by(level, node) %>%
mutate(source = match(node, nodes$name) - 1) %>%
arrange(source) %>%
ungroup() %>%
mutate(target = lead(source)) %>%
filter(!is.na(target)) %>%
group_by(source, target) %>%
summarise(value = sum(Counts), .groups = 'drop')
# Create the Sankey plot
sankey <- sankeyNetwork(Links = links, Nodes = nodes, Source = "source", Target = "target",
Value = "value", NodeID = "name", fontSize = 12, nodeWidth = 30)
# Display the Sankey plot
sankey
install.packages(c("httr", "jsonlite"))
library(httr)
library(jsonlite)
res = GET("https://www.ebi.ac.uk/ebisearch/ws/rest/europepmc?query=(pathogens)%20AND%20(bacterial)&size=15&fields=name,author,pagination,publication_date,pmcid,source,journal")
res
rawToChar(res$content)
fromJSON(rawToChar(res$content))
res = GET("curl https://www.ebi.ac.uk/ebisearch/ws/rest/sra-sample?query=tag%3A(%22pathogen%3Apriority%22)&size=15&fields=acc,scientific_name,collection_date,center_name,country,host,country,description,BIOSAMPLE")
res = GET("curl https://www.ebi.ac.uk/ebisearch/ws/rest/sra-sample?query=tag%3A(%22pathogen%3Apriority%22)&size=15&fields=acc,scientific_name,collection_date,center_name,country,host,country,description,BIOSAMPLE")
GET("curl https://www.ebi.ac.uk/ebisearch/ws/rest/sra-sample?query=tag%3A(%22pathogen%3Apriority%22)&size=15&fields=acc,scientific_name,collection_date,center_name,country,host,country,description,BIOSAMPLE")
res = GET("curl https://www.ebi.ac.uk/ebisearch/ws/rest/europepmc?query=(pathogens)%20AND%20(bacterial)&size=15&fields=name,author,pagination,publication_date,pmcid,source,journal")
GET("curl https://www.ebi.ac.uk/ebisearch/ws/rest/europepmc?query=(pathogens)%20AND%20(bacterial)&size=15&fields=name,author,pagination,publication_date,pmcid,source,journal")
res = GET("curl curl https://www.ebi.ac.uk/ebisearch/ws/rest/europepmc?query=(pathogens)%20AND%20(bacterial)&size=15&fields=name,author,pagination,publication_date,pmcid,source,journal")
library(httr)
library(jsonlite)
GET("curl https://www.bv-brc.org/api/strain")
GET("https://www.bv-brc.org/api/strain")
res = GET("https://www.bv-brc.org/api/strain")
res = GET("https://www.bv-brc.org/api/strain")
fromJSON(rawToChar(res$content))
fromJSON(rawToChar(res$content)) %>% as.data.frame() %>% View()
library(tidyverse)
fromJSON(rawToChar(res$content)) %>% as.data.frame() %>% View()
res = GET("https://www.bv-brc.org/api/genome")
fromJSON(rawToChar(res$content)) %>% as.data.frame() %>% View()
