runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
runApp()
runApp()
paste0('bash blastn_run.sh -p ', input$fastqdir, ' -t ',
input$threads, ' -m ', input$min, ' -M ',
input$max,' -i ', input$iden)
input$fastqdir <- "/nfs_master/nirmal/web_app_data"
input <- NULL
input$fastqdir <- "/nfs_master/nirmal/web_app_data"
input$threads <- 16
input$min <- 1400
input$max <- 1800
input$iden <- 75
paste0('bash blastn_run.sh -p ', input$fastqdir, ' -t ',
input$threads, ' -m ', input$min, ' -M ',
input$max,' -i ', input$iden)
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
?table
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
source("ui.R")
runApp()
?observeEvent()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
gc()
source("ui.R")
gc()
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
source("ui.R")
Sys.getenv("http_proxy")
Sys.setenv("http_proxy")
Sys.setenv("http_proxy"="http://proxy61.iitd.ac.in:3128")
Sys.setenv("https_proxy"="http://proxy61.iitd.ac.in:3128")
Sys.getenv("http_proxy")
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
runApp()
source("ui.R")
runApp()
runApp()
runApp('test.R')
runApp('test.R')
source("ui.R")
runApp()
runApp()
source("ui.R")
runApp()
source("ui.R")
runApp()
runApp('test.R')
paste0(path,"/realtime/bin/python")
conda_path <- system('which conda | sed "s/condabin.*$//g"', intern = TRUE)
library(shiny); runApp('test.R')
runApp('test.R')
library(shiny); runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
library(shiny); runApp('test.R')
runApp('test.R')
runApp('test.R')
C:/Users/Nirmal/OneDrive/Documents/.virtualenvs/r-reticulate/Scripts/python.exe" -m pip install --upgrade --no-user pandas
"C:/Users/Nirmal/OneDrive/Documents/.virtualenvs/r-reticulate/Scripts/python.exe" -m pip install --upgrade --no-user pandas
!pip install pandas
runApp('test.R')
system()
library(shiny); runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
library(shiny); runApp('test.R')
runApp('test.R')
library(shiny); runApp('test.R')
library(shiny); runApp('test.R')
runApp('test.R')
library(shiny); runApp('test.R')
runApp('test.R')
runApp('test.R')
library(shiny); runApp('test.R')
runApp('test.R')
runApp('test.R')
library(shiny); runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
library(shiny); runApp('test.R')
runApp('test.R')
runApp('test.R')
source("ui.R")
runApp()
runApp()
source("ui.R")
runApp()
library(shiny); runApp('test.R')
runApp('test.R')
library(shiny); runApp('test.R')
runApp('test.R')
library(reticulate)
py_run_file("Scripts/barcode_dummy.py")
py$df
py_run_file("Scripts/barcode_dummy.py")$df
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
paste0("barcode", seq(01,24,01))
runApp('test.R')
runApp('test.R')
runApp('test.R')
py_run_file("Scripts/barcode_dummy.py")$df
passed_counts() <- py_run_file("Scripts/barcode_dummy.py")$df
passed_counts <- py_run_file("Scripts/barcode_dummy.py")$df
passed_counts[passed_counts$Barcode=="barcode01"]
passed_counts[passed_counts$Barcode=="barcode01",Counts]
passed_counts[passed_counts$Barcode=="barcode01","Counts"]
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
passed_counts[passed_counts$Barcode=="barcode01"]
passed_counts[passed_counts$Barcode=="barcode01","Counts"]
tmp <- passed_counts[passed_counts$Barcode=="barcode01","Counts"]
paste("Passed count for barcode01", ":", tmp)
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
passed_counts$Barcode=="barcode01"
which(passed_counts$Barcode=="barcode01")
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
paste0("barcode", seq(01,24,01))
sprintf("%02d", 1:9)
paste0("barcode",sprintf("%02d", 1:9))
runApp('test.R')
runApp('test.R')
library(shiny); runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
?selectInput()
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
read.table("hist_data.txt", sep="\t", header = FALSE)
read.table("hist_data.txt", sep="\t", header = FALSE) %>% ggplot(aes(V1,V2)) +
geom_bar(stat = "identity")
read.table("hist_data.txt", sep="\t", header = FALSE) %>% ggplot(aes(v1,v2)) +
geom_bar(stat = "identity")
ncol(read.table("hist_data.txt", sep="\t", header = FALSE))
read.table("hist_data.txt", sep="\t", header = FALSE)
read.table("hist_data.txt", sep="\t", header = FALSE)
ncol(read.table("hist_data.txt", sep="\t", header = FALSE))
ncol(read.table("hist_data.txt", sep="\t", header = FALSE))
read.table("hist_data.txt", sep="\t", header = FALSE)
hist_data <- read.table("hist_data.txt", sep="\t", header = FALSE)
colnames(hist_data) <- c("Bin", "Counts")
hist_data %>% ggplot(aes(Bin, Counts)) + geom_bar(stat = "identity")
hist_data <- read.table("hist_data.txt", sep="\t", header = FALSE)
colnames(hist_data) <- c("Bin", "Counts")
hist_data %>% ggplot(aes(Bin, Counts)) + geom_bar(stat = "identity")
hist_data <- read.table("hist_data.txt", sep="\t", header = FALSE)
colnames(hist_data) <- c("Bin", "Counts")
hist_data %>% ggplot(aes(Bin, Counts)) + geom_bar(stat = "identity")
runApp('test.R')
shiny::runApp()
shiny::runApp()
runApp('test.R')
shiny::runApp()
shiny::runApp()
shiny::runApp()
pal_aaas()
pal_aaas("default")
pal_aaas("default")(5)
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(forcats)
runApp()
library(tidyverse)
library(stringr)
library(ggpubr)
library(dendextend)
library(ComplexHeatmap)
library(vegan)
library(ggrepel)
library(grid)
library(gridExtra)
library(phyloseq)
library(ggforce)
library(ggsci)
library(scales)
library(ComplexHeatmap)
library(dendextend)
library(viridis)
library(circlize)
library(compositions)
library(pairwiseAdonis)
library(ANCOMBC)
library(phyloseq)
library(lme4)
library(umap)
library(tsne)
library(forcats)
file_list <- gsub(".txt", "", list.files(getwd())[grep("\\_final_blast_result.txt$",
list.files(getwd()))])
samples_header <- gsub("_final_blast_result","",file_list)
sample_metadata <- read.table(file = "Sample_Information.csv", sep = ",",
header = TRUE)
file_list <- gsub(".txt", "", list.files(getwd())[grep("\\_final_blast_result.txt$",
list.files(getwd()))])
samples_header <- gsub("_final_blast_result","",file_list)
read.table(file = "Sample_Information.csv", sep = ",",
header = TRUE)
getwd()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shiny); runApp('test.R')
runApp('test.R')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("processx")
install.packages("processx")
library(processx)
runApp()
runApp()
?renderPlotly()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
system("if [ $(which conda | grep 'condabin') ]; then conda_path=$(which conda | sed 's/\/condabin.*$//g'); else conda_path=$(which conda | sed 's/\/bin.*$//g'); fi && echo $conda_path", intern = TRUE)
system('if [ $(which conda | grep "condabin") ]; then conda_path=$(which conda | sed "s/\/condabin.*$//g"); else conda_path=$(which conda | sed "s/\/bin.*$//g"); fi && echo $conda_path', intern = TRUE)
system("if [ $(which conda | grep 'condabin') ]; then conda_path=$(which conda | sed 's/\\/condabin.*$//g'); else conda_path=$(which conda | sed 's/\\/bin.*$//g'); fi && echo $conda_path", intern = TRUE)
runApp()
library(shiny); runApp('main_app.R')
runApp('main_app.R')
shiny::runApp()
