links <- data.frame()
for (i in 1:(length(columns) - 1)) {
source_col <- columns[i]
target_col <- columns[i + 1]
temp_links <- df %>%
select(source = source_col, target = target_col, value = Counts) %>%
group_by(source, target) %>%
summarise(value = sum(value)) %>%
ungroup()
links <- rbind(links, temp_links)
}
library(tidyverse)
links <- data.frame()
for (i in 1:(length(columns) - 1)) {
source_col <- columns[i]
target_col <- columns[i + 1]
temp_links <- df %>%
select(source = source_col, target = target_col, value = Counts) %>%
group_by(source, target) %>%
summarise(value = sum(value)) %>%
ungroup()
links <- rbind(links, temp_links)
}
links <- data.frame()
for (i in 1:(length(columns) - 1)) {
source_col <- columns[i]
target_col <- columns[i + 1]
temp_links <- temp %>%
select(source = source_col, target = target_col, value = Counts) %>%
group_by(source, target) %>%
summarise(value = sum(value)) %>%
ungroup()
links <- rbind(links, temp_links)
}
links$source <- match(links$source, nodes$name) - 1
links$target <- match(links$target, nodes$name) - 1
sankeyNetwork(Links = links, Nodes = nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
sinksRight = FALSE, nodeWidth = 30, fontSize = 12,
height = 800, width = 1200)
temp <- sample_data_list[[1]]
temp <- temp[,-10]
df_long <- temp %>%
select(Domain = Superkingdom, Phylum, Family, Genus, Species, Counts) %>%
gather(key = "Taxonomy", value = "Taxon", -Counts) %>%
mutate(Taxonomy = factor(Taxonomy, levels = c("Domain", "Phylum", "Family", "Genus", "Species")))
ggplot(df_long,
aes(x = Taxonomy, stratum = Taxon, alluvium = Taxon,
y = Counts, fill = Phylum, label = Taxon)) +
geom_flow(width = 1/8) +
geom_stratum(alpha = .5, width = 1/8) +
geom_text(stat = "stratum", size = 3, color = "black") +
scale_x_discrete(limits = c("D", "P", "F", "G", "S"),
expand = c(.1, .1)) +
scale_fill_brewer(palette = "Set3") +
theme_minimal() +
theme(legend.position = "none",
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid = element_blank()) +
labs(title = "Taxonomic Classification Sankey Diagram")
library(ggalluvial)
install.packages("ggalluvial")
library(ggalluvial)
ggplot(df_long,
aes(x = Taxonomy, stratum = Taxon, alluvium = Taxon,
y = Counts, fill = Phylum, label = Taxon)) +
geom_flow(width = 1/8) +
geom_stratum(alpha = .5, width = 1/8) +
geom_text(stat = "stratum", size = 3, color = "black") +
scale_x_discrete(limits = c("D", "P", "F", "G", "S"),
expand = c(.1, .1)) +
scale_fill_brewer(palette = "Set3") +
theme_minimal() +
theme(legend.position = "none",
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid = element_blank()) +
labs(title = "Taxonomic Classification Sankey Diagram")
df_long
ggplot(df_long,
aes(x = Taxonomy, stratum = Taxon, alluvium = Taxon,
y = Counts, fill = Taxonomy, label = Taxon)) +
geom_flow(width = 1/8) +
geom_stratum(alpha = .5, width = 1/8) +
geom_text(stat = "stratum", size = 3, color = "black") +
scale_x_discrete(limits = c("D", "P", "F", "G", "S"),
expand = c(.1, .1)) +
scale_fill_brewer(palette = "Set3") +
theme_minimal() +
theme(legend.position = "none",
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid = element_blank()) +
labs(title = "Taxonomic Classification Sankey Diagram")
temp %>%
select(Superkingdom, Phylum, Family, Genus, Species, Counts) %>%
pivot_longer(cols = c(Superkingdom, Phylum, Family, Genus, Species),
names_to = "Taxonomy",
values_to = "Taxon") %>%
mutate(Taxonomy = factor(Taxonomy,
levels = c("Superkingdom", "Phylum", "Family", "Genus", "Species"),
labels = c("D", "P", "F", "G", "S")))
df_long <- temp %>%
select(Superkingdom, Phylum, Family, Genus, Species, Counts) %>%
pivot_longer(cols = c(Superkingdom, Phylum, Family, Genus, Species),
names_to = "Taxonomy",
values_to = "Taxon") %>%
mutate(Taxonomy = factor(Taxonomy,
levels = c("Superkingdom", "Phylum", "Family", "Genus", "Species"),
labels = c("D", "P", "F", "G", "S")))
ggplot(df_long,
aes(x = Taxonomy, stratum = Taxon, alluvium = Counts,
y = Counts, fill = Phylum, label = Taxon)) +
geom_flow(stat = "alluvium", lode.guidance = "frontback", color = "white") +
geom_stratum(alpha = .5) +
geom_text(stat = "stratum", size = 3, color = "black") +
scale_x_discrete(expand = c(.1, .1)) +
scale_fill_brewer(palette = "Set3") +
theme_minimal() +
theme(legend.position = "none",
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid = element_blank()) +
labs(title = "Taxonomic Classification Sankey Diagram")
temp %>%
select(Superkingdom, Phylum, Family, Genus, Species, Counts) %>%
pivot_longer(cols = c(Superkingdom, Phylum, Family, Genus, Species),
names_to = "Taxonomy",
values_to = "Taxon") %>%
mutate(Taxonomy = factor(Taxonomy,
levels = c("Superkingdom", "Phylum", "Family", "Genus", "Species"),
labels = c("D", "P", "F", "G", "S"))) %>%
group_by(Superkingdom, Phylum, Taxonomy, Taxon) %>%
summarise(Counts = sum(Counts), .groups = "drop")
temp %>%
select(Superkingdom, Phylum, Family, Genus, Species, Counts) %>%
pivot_longer(cols = c(Superkingdom, Phylum, Family, Genus, Species),
names_to = "Taxonomy",
values_to = "Taxon") %>%
mutate(Taxonomy = factor(Taxonomy,
levels = c("Superkingdom", "Phylum", "Family", "Genus", "Species"),
labels = c("D", "P", "F", "G", "S")))
temp <- sample_data_list[[1]]
temp <- temp[,-10]
temp %>%
select(Superkingdom, Phylum, Class, Order, Family, Genus, Species, Counts) %>%
pivot_longer(cols = c(Superkingdom, Phylum, Class, Order, Family, Genus, Species),
names_to = "Taxonomy",
values_to = "Taxon") %>%
mutate(Taxonomy = factor(Taxonomy,
levels = c("Superkingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species"),
labels = c("D", "P", "C", "O", "F", "G", "S"))) %>%
group_by(Superkingdom, Phylum, Taxonomy, Taxon) %>%
summarise(Counts = sum(Counts), .groups = "drop")
temp %>%
select(Superkingdom, Phylum, Class, Order, Family, Genus, Species, Counts) %>%
pivot_longer(cols = c(Superkingdom, Phylum, Class, Order, Family, Genus, Species),
names_to = "Taxonomy",
values_to = "Taxon")
temp %>%
select(Superkingdom, Phylum, Class, Order, Family, Genus, Species, Counts) %>%
pivot_longer(cols = c(Superkingdom, Phylum, Class, Order, Family, Genus, Species),
names_to = "Taxonomy",
values_to = "Taxon") %>%
mutate(Taxonomy = factor(Taxonomy,
levels = c("Superkingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species"),
labels = c("D", "P", "C", "O", "F", "G", "S")))
temp %>%
select(Superkingdom, Phylum, Class, Order, Family, Genus, Species, Counts) %>%
pivot_longer(cols = c(Superkingdom, Phylum, Class, Order, Family, Genus, Species),
names_to = "Taxonomy",
values_to = "Taxon") %>%
mutate(Taxonomy = factor(Taxonomy,
levels = c("Superkingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species"),
labels = c("D", "P", "C", "O", "F", "G", "S"))) %>%
group_by(Taxonomy, Taxon) %>%
summarise(Counts = sum(Counts), .groups = "drop")
df_long <- temp %>%
select(Superkingdom, Phylum, Class, Order, Family, Genus, Species, Counts) %>%
pivot_longer(cols = c(Superkingdom, Phylum, Class, Order, Family, Genus, Species),
names_to = "Taxonomy",
values_to = "Taxon") %>%
mutate(Taxonomy = factor(Taxonomy,
levels = c("Superkingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species"),
labels = c("D", "P", "C", "O", "F", "G", "S"))) %>%
group_by(Taxonomy, Taxon) %>%
summarise(Counts = sum(Counts), .groups = "drop")
ggplot(df_long,
aes(x = Taxonomy, stratum = Taxon, alluvium = Counts,
y = Counts, fill = Taxon, label = Taxon)) +
geom_flow(stat = "alluvium", lode.guidance = "frontback", color = "white") +
geom_stratum(alpha = .5) +
geom_text(stat = "stratum", size = 3, color = "black") +
scale_x_discrete(expand = c(.1, .1)) +
scale_fill_brewer(palette = "Set3") +
theme_minimal() +
theme(legend.position = "none",
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid = element_blank()) +
labs(title = "Taxonomic Classification Sankey Diagram")
ggplot(df_long,
aes(x = Taxonomy, stratum = Taxon, alluvium = Counts,
y = Counts, fill = Taxon, label = Taxon)) +
geom_flow(stat = "alluvium", lode.guidance = "frontback", color = "white")
df_long
df_long %>% View()
library(tidyverse)
library(stringr)
library(ggpubr)
library(dendextend)
library(ComplexHeatmap)
library(vegan)
library(ggrepel)
library(grid)
library(gridExtra)
library(phyloseq)
library(ggforce)
library(ggsci)
library(scales)
library(ComplexHeatmap)
library(dendextend)
library(viridis)
library(circlize)
library(compositions)
library(pairwiseAdonis)
library(ANCOMBC)
library(phyloseq)
library(lme4)
library(forcats)
library(tidyverse)
library(stringr)
library(ggpubr)
library(dendextend)
library(ComplexHeatmap)
library(vegan)
library(ggrepel)
library(grid)
library(gridExtra)
library(phyloseq)
library(ggforce)
library(ggsci)
library(scales)
library(ComplexHeatmap)
library(dendextend)
library(viridis)
library(circlize)
library(compositions)
library(pairwiseAdonis)
library(ANCOMBC)
library(phyloseq)
library(lme4)
library(forcats)
rel_abundance_data
ggplot(stacked_df, aes(x = Sample_Id, y = Abundance, fill = !!sym(lineage))) +
geom_bar(stat = "identity", position = "stack", color = "black", linewidth = 0.2) +
theme_classic() +
theme(
axis.text.x = element_text(size = 10, face = "bold", angle = 45, hjust = 1),
axis.text.y = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 10, face = "bold"),
axis.title.y = element_text(size = 10, face = "bold"),
legend.title = element_text(face = "bold"),
legend.text = element_text(face = "bold"),
legend.position = "bottom",
title = element_text(size = 10, face = "bold")
) +
guides(fill = guide_legend(ncol = 5)) +
labs(x = "BARCODE", y="% RELATIVE ABUNDANCE", fill = lineage) +
scale_fill_manual(values = fill_colors) +
scale_y_continuous(expand = c(0, 0), limits = c(0,102)) +
ggtitle(label = paste0("Stacked Barplot Showing Top 10 ",lineage," Across All Samples"))
stacked_df <- rel_abundance_data
required_col <- which(colnames(stacked_df)==lineage)
stacked_df[,required_col] <- as.character(stacked_df[,required_col])
stacked_df <- stacked_df %>%
pivot_longer(cols = -(all_of(required_col)), names_to = "Sample_Id", values_to = "Abundance") %>%
filter(Abundance > 0)
stacked_df <- stacked_df %>% group_by(Sample_Id) %>%
arrange(desc(Abundance)) %>% slice(1:ifelse(n()<10,n(),10))
stacked_df$Sample_Id <- gsub("barcode","", stacked_df$Sample_Id)
temp <- stacked_df %>% group_by(Sample_Id) %>% summarise(Abundance = 100-sum(Abundance)) %>% mutate(Species="Others") %>%
dplyr::select(Species, Sample_Id, Abundance)
colnames(temp) <- colnames(stacked_df)
stacked_df <- rbind(stacked_df, temp) %>% arrange(Sample_Id)
stacked_df[[required_col]] <- factor(stacked_df[[required_col]])
stacked_df[[required_col]] <- factor(stacked_df[[required_col]],
levels = c("Others", setdiff(levels(stacked_df[[required_col]]), "Others")))
fill_colors <- c("Others" = "#D3D3D3",setNames(viridis_pal(option = "D")(
length(levels(stacked_df[[required_col]]))-1),
levels(stacked_df[[required_col]])[levels(stacked_df[[required_col]]) != "Others"]))
ggplot(stacked_df, aes(x = Sample_Id, y = Abundance, fill = !!sym(lineage))) +
geom_bar(stat = "identity", position = "stack", color = "black", linewidth = 0.2) +
theme_classic() +
theme(
axis.text.x = element_text(size = 10, face = "bold", angle = 45, hjust = 1),
axis.text.y = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 10, face = "bold"),
axis.title.y = element_text(size = 10, face = "bold"),
legend.title = element_text(face = "bold"),
legend.text = element_text(face = "bold"),
legend.position = "bottom",
title = element_text(size = 10, face = "bold")
) +
guides(fill = guide_legend(ncol = 5)) +
labs(x = "BARCODE", y="% RELATIVE ABUNDANCE", fill = lineage) +
scale_fill_manual(values = fill_colors) +
scale_y_continuous(expand = c(0, 0), limits = c(0,102)) +
ggtitle(label = paste0("Stacked Barplot Showing Top 10 ",lineage," Across All Samples"))
stacked_df
stacked_df %>% View()
stacked_df <- rel_abundance_data
required_col <- which(colnames(stacked_df)==lineage)
stacked_df[,required_col] <- as.character(stacked_df[,required_col])
stacked_df <- stacked_df %>%
pivot_longer(cols = -(all_of(required_col)), names_to = "Sample_Id", values_to = "Abundance") %>%
filter(Abundance > 0)
stacked_df <- stacked_df %>% group_by(Sample_Id) %>%
arrange(desc(Abundance)) %>% slice(1:ifelse(n()<5,n(),5))
stacked_df$Sample_Id <- gsub("barcode","", stacked_df$Sample_Id)
temp <- stacked_df %>% group_by(Sample_Id) %>% summarise(Abundance = 100-sum(Abundance)) %>% mutate(Species="Others") %>%
dplyr::select(Species, Sample_Id, Abundance)
colnames(temp) <- colnames(stacked_df)
stacked_df <- rbind(stacked_df, temp) %>% arrange(Sample_Id)
stacked_df[[required_col]] <- factor(stacked_df[[required_col]])
stacked_df[[required_col]] <- factor(stacked_df[[required_col]],
levels = c("Others", setdiff(levels(stacked_df[[required_col]]), "Others")))
fill_colors <- c("Others" = "#D3D3D3",setNames(viridis_pal(option = "D")(
length(levels(stacked_df[[required_col]]))-1),
levels(stacked_df[[required_col]])[levels(stacked_df[[required_col]]) != "Others"]))
ggplot(stacked_df, aes(x = Sample_Id, y = Abundance, fill = !!sym(lineage))) +
geom_bar(stat = "identity", position = "stack", color = "black", linewidth = 0.2) +
theme_classic() +
theme(
axis.text.x = element_text(size = 10, face = "bold", angle = 45, hjust = 1),
axis.text.y = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 10, face = "bold"),
axis.title.y = element_text(size = 10, face = "bold"),
legend.title = element_text(face = "bold"),
legend.text = element_text(face = "bold"),
legend.position = "bottom",
title = element_text(size = 10, face = "bold")
) +
guides(fill = guide_legend(ncol = 5)) +
labs(x = "BARCODE", y="% RELATIVE ABUNDANCE", fill = lineage) +
scale_fill_manual(values = fill_colors) +
scale_y_continuous(expand = c(0, 0), limits = c(0,102)) +
ggtitle(label = paste0("Stacked Barplot Showing Top 10 ",lineage," Across All Samples"))
stacked_df <- rel_abundance_data
required_col <- which(colnames(stacked_df) == lineage)
stacked_df[, required_col] <- as.character(stacked_df[, required_col])
stacked_df <- stacked_df %>%
pivot_longer(cols = -all_of(required_col), names_to = "Sample_Id", values_to = "Abundance") %>%
filter(Abundance > 0)
stacked_df <- stacked_df %>% group_by(Sample_Id) %>%
arrange(desc(Abundance)) %>% slice(1:ifelse(n() < 5, n(), 5))
stacked_df$Sample_Id <- gsub("barcode", "", stacked_df$Sample_Id)
# Create the "Others" category and bind to the data frame
temp <- stacked_df %>% group_by(Sample_Id) %>% summarise(Abundance = 100 - sum(Abundance)) %>%
mutate(Species = "Others") %>%
dplyr::select(Species, Sample_Id, Abundance)
colnames(temp) <- colnames(stacked_df)
stacked_df <- rbind(stacked_df, temp) %>% arrange(Sample_Id)
# Calculate total abundance for each species across all samples
total_abundance <- stacked_df %>%
group_by(get(lineage)) %>%
summarise(TotalAbundance = sum(Abundance)) %>%
arrange(desc(TotalAbundance))
# Reorder the factor levels based on total abundance, ensuring "Others" is first
stacked_df[[required_col]] <- factor(stacked_df[[required_col]],
levels = c("Others", total_abundance[[lineage]][total_abundance[[lineage]] != "Others"]))
fill_colors <- c("Others" = "#D3D3D3", setNames(viridis_pal(option = "D")(
length(levels(stacked_df[[required_col]])) - 1),
levels(stacked_df[[required_col]])[levels(stacked_df[[required_col]]) != "Others"]))
# Create the plot
ggplot(stacked_df, aes(x = Sample_Id, y = Abundance, fill = !!sym(lineage))) +
geom_bar(stat = "identity", position = "stack", color = "black", linewidth = 0.2) +
theme_classic() +
theme(
axis.text.x = element_text(size = 10, face = "bold", angle = 45, hjust = 1),
axis.text.y = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 10, face = "bold"),
axis.title.y = element_text(size = 10, face = "bold"),
legend.title = element_text(face = "bold"),
legend.text = element_text(face = "bold"),
legend.position = "bottom",
title = element_text(size = 10, face = "bold")
) +
guides(fill = guide_legend(ncol = 5)) +
labs(x = "BARCODE", y = "% RELATIVE ABUNDANCE", fill = lineage) +
scale_fill_manual(values = fill_colors) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 102)) +
ggtitle(label = paste0("Stacked Barplot Showing Top 10 ", lineage, " Across All Samples"))
c("Others" = "#D3D3D3", setNames(viridis_pal(option = "D")(
length(levels(stacked_df[[required_col]])) - 1),
levels(stacked_df[[required_col]])[levels(stacked_df[[required_col]]) != "Others"]))
stacked_df
stacked_df <- rel_abundance_data
required_col <- which(colnames(stacked_df) == lineage)
stacked_df[, required_col] <- as.character(stacked_df[, required_col])
stacked_df <- stacked_df %>%
pivot_longer(cols = -all_of(required_col), names_to = "Sample_Id", values_to = "Abundance") %>%
filter(Abundance > 0)
stacked_df <- stacked_df %>% group_by(Sample_Id) %>%
arrange(desc(Abundance)) %>% slice(1:ifelse(n() < 5, n(), 5))
stacked_df$Sample_Id <- gsub("barcode", "", stacked_df$Sample_Id)
stacked_df
# Create the "Others" category and bind to the data frame
temp <- stacked_df %>% group_by(Sample_Id) %>% summarise(Abundance = 100 - sum(Abundance)) %>%
mutate(Species = "Others") %>%
dplyr::select(Species, Sample_Id, Abundance)
colnames(temp) <- colnames(stacked_df)
rbind(stacked_df, temp) %>% arrange(Sample_Id)
stacked_df <- rbind(stacked_df, temp) %>% arrange(Sample_Id)
total_abundance <- stacked_df %>%
group_by(get(lineage)) %>%
summarise(TotalAbundance = sum(Abundance)) %>%
arrange(desc(TotalAbundance))
total_abundance
# Calculate total abundance for each species across all samples
total_abundance <- stacked_df %>%
group_by(!!sym(lineage)) %>%
summarise(TotalAbundance = sum(Abundance)) %>%
arrange(desc(TotalAbundance))
total_abundance
factor(stacked_df[[required_col]],
levels = c("Others", total_abundance[[required_col]][total_abundance[[required_col]] != "Others"]))
# Reorder the factor levels based on total abundance, ensuring "Others" is first
stacked_df[[required_col]] <- factor(stacked_df[[required_col]],
levels = c("Others", total_abundance[[required_col]][total_abundance[[required_col]] != "Others"]))
stacked_df
fill_colors <- c("Others" = "#D3D3D3", setNames(viridis_pal(option = "D")(
length(levels(stacked_df[[required_col]])) - 1),
levels(stacked_df[[required_col]])[levels(stacked_df[[required_col]]) != "Others"]))
# Create the plot
ggplot(stacked_df, aes(x = Sample_Id, y = Abundance, fill = !!sym(lineage))) +
geom_bar(stat = "identity", position = "stack", color = "black", linewidth = 0.2) +
theme_classic() +
theme(
axis.text.x = element_text(size = 10, face = "bold", angle = 45, hjust = 1),
axis.text.y = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 10, face = "bold"),
axis.title.y = element_text(size = 10, face = "bold"),
legend.title = element_text(face = "bold"),
legend.text = element_text(face = "bold"),
legend.position = "bottom",
title = element_text(size = 10, face = "bold")
) +
guides(fill = guide_legend(ncol = 5)) +
labs(x = "BARCODE", y = "% RELATIVE ABUNDANCE", fill = lineage) +
scale_fill_manual(values = fill_colors) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 102)) +
ggtitle(label = paste0("Stacked Barplot Showing Top 10 ", lineage, " Across All Samples"))
stacked_df
stacked_df %>% View()
library(tidyverse)
library(stringr)
library(ggpubr)
library(dendextend)
library(ComplexHeatmap)
library(vegan)
library(ggrepel)
library(grid)
library(gridExtra)
library(phyloseq)
library(ggforce)
library(ggsci)
library(scales)
library(ComplexHeatmap)
library(dendextend)
library(viridis)
library(circlize)
library(compositions)
library(pairwiseAdonis)
library(ANCOMBC)
library(phyloseq)
library(lme4)
library(forcats)
heatmap_df <- as.data.frame(log10(rel_abundance_filtered_matrix+0.00001))
sample_metadata$Group <- factor(sample_metadata$Group)
col_list <- list(Group = setNames(pal_aaas("default")(length(levels(sample_metadata$Group))) ,levels(sample_metadata$Group)))
row_annotate <- rowAnnotation(
df = sample_annotation,
col = col_list, show_annotation_name = FALSE)
row_dend <-  hclust(dist(t(heatmap_df)), method = "complete")
column_dend <- hclust(dist(heatmap_df), method = "complete")
tmp <- heatmap_df %>% pivot_longer(cols = 1:length(colnames(heatmap_df)), names_to = "Sample",
values_to = "Abundance")
col_fun <- colorRamp2(c(as.vector(min(tmp$Abundance)),
as.vector(quantile(tmp$Abundance)[3]),
as.vector(max(tmp$Abundance))), c("#1010fe", "white", "#FF1212"))
heatmap_plot <- Heatmap(t(heatmap_df), heatmap_legend_param = list(title = expression("Log"[10]*"Relative Abundance"),
title_gp = gpar(fontsize = 10)),
row_names_gp = gpar(fontsize = 10, fontface = "bold"),
cluster_rows = color_branches(row_dend),
cluster_columns = color_branches(column_dend),
show_column_names = FALSE,
show_row_names = TRUE,
right_annotation = row_annotate,
col = col_fun(seq(min(tmp$Abundance), max(tmp$Abundance)))
)
heatmap_ggplot <- as_ggplot(grid.grabExpr(print(heatmap_plot)))
print(heatmap_ggplot)
stacked_df
View(abundance_matrix)
